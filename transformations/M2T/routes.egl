# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index()

#Retos
GET     /retos	 					controllers.ControllerRetos.listarRetos()
GET     /retosActivos	 			controllers.ControllerRetos.listarRetosActivos()
GET 	/agregarReto 				controllers.ControllerRetos.agregarReto()
DELETE  /retos/:id 					controllers.ControllerRetos.eliminarReto(id: Long)
GET 	/retos/:id 					controllers.ControllerRetos.details(id: Long)
POST 	/retos/save 				controllers.ControllerRetos.guardar(nuevoReto: Boolean)
GET     /retosUsuario	 			controllers.ControllerRetos.listarRetosUsuario()

[%
	if(Feature.allInstances().exists(feat | feat.name="ReporteRutas") or 
	Feature.allInstances().exists(feat | feat.name="ReporteMetricas") or 
	Feature.allInstances().exists(feat | feat.name="ReporteHistorialViajes")){%]
#Reportes
GET		/generarReporte				controllers.ControllerReportes.generarReportePDF(criteriaReporte: Integer)
GET		/generarReporteParam		controllers.ControllerReportes.generarReporteParamPDF(criteriaReporte: Integer, idRecorrido: Long)
	[%}
%]

#Recompensas
GET     /guardarRecompensaUsuario	controllers.ControllerRecompensas.guardarRecompensaUsuario(id: Long)
GET     /recompensas	 			controllers.ControllerRecompensas.listarRecompensas()
GET     /recompensasDisponibles		controllers.ControllerRecompensas.listarRecompensasDisponiblesUsuario()
GET 	/agregarRecompensa 			controllers.ControllerRecompensas.agregarRecompensa()
DELETE  /recompensas/:id 			controllers.ControllerRecompensas.eliminarRecompensa(id: Long)
GET 	/recompensas/:id 			controllers.ControllerRecompensas.details(id: Long)
POST 	/recompensas/save 			controllers.ControllerRecompensas.guardar(nuevaRecompensa: Boolean)
GET     /recompensasUsuario	 		controllers.ControllerRecompensas.listarRecompensasUsuario()

#Sitios de Recorridos
GET     /getFormRecorridos          controllers.ControllerRecorrido.getFormRecorridos
POST    /FormRecorridos   		    controllers.ControllerRecorrido.postFormRecorridos
GET		/listRecorridos				controllers.ControllerRecorrido.listarRecorridos()
GET		/listRecorridosWeb			controllers.ControllerRecorrido.listarRecorridosWeb()

#Recorridos
GET		/ejecutarRecorrido			controllers.ControllerMetricas.iniciarRecorridoWeb(idRecorridoSeleccionado: Long)
GET		/detallesRecorridos			controllers.ControllerRecorrido.detallesRecorridos()
GET		/inscribirARecorrido		controllers.ControllerRecorrido.inscribirARecorrido()
POST	/guardarMetricas			controllers.ControllerMetricas.guardarMetricas()

[% if(Feature.allInstances().exists(feat | feat.name="SitiosAlquiler")){%]		
#Sitios de alquiler
GET		/sitiosDeAlquiler			controllers.ControllerSitiosDeAlquiler.listarSitiosDeAlquiler()
GET 	/estaciones/:idSitio	 	controllers.ControllerSitiosDeAlquiler.detailsEstacion(idSitio: Long)
GET 	/sitiosDeAlquiler/:idSitio	controllers.ControllerSitiosDeAlquiler.detailsSitioAlquiler(idSitio: Long)
POST 	/sitiosDeAlquiler/save 		controllers.ControllerSitiosDeAlquiler.save(nuevoSitio: Boolean)
GET 	/sitiosDeAlquiler/ 		    controllers.ControllerSitiosDeAlquiler.newSitio()
GET 	/estaciones/	 		    controllers.ControllerSitiosDeAlquiler.newEstacion()
POST 	/estaciones/save			controllers.ControllerSitiosDeAlquiler.guardarEstacion(nuevaEstacion: Boolean)
DELETE  /estaciones/:id 			controllers.ControllerSitiosDeAlquiler.eliminarEstacion(id: Long)		
[% } %]

[% if(Feature.allInstances().exists(feat | feat.name="ConfiguradorBicicletas")){%]
#Configurador de bicicletas
GET     /configurador                        controllers.ConfiguradorController.index()
GET    /configurador/verResultados	   		   	controllers.ConfiguradorController.verResultados()
[% } %]

GET     /restricted                 controllers.Application.restricted
GET     /assets/javascript/routes.js    controllers.Application.jsRoutes

GET     /profile                    controllers.Application.profile

GET     /login                      controllers.Application.login
POST    /login                      controllers.Application.doLogin

GET     /logout                     com.feth.play.module.pa.controllers.Authenticate.logout
GET     /authenticate/:provider     com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET     /signup                     controllers.Application.signup
POST    /signup                     controllers.Application.doSignup

GET     /accounts/unverified        controllers.Signup.unverified
GET     /authenticate/:provider/denied     controllers.Signup.oAuthDenied(provider: String)

GET     /accounts/verify/:token     controllers.Signup.verify(token: String)
GET     /accounts/exists            controllers.Signup.exists

GET     /accounts/password/reset/:token     controllers.Signup.resetPassword(token: String)
POST    /accounts/password/reset            controllers.Signup.doResetPassword

GET    /accounts/password/change    controllers.Account.changePassword
POST   /accounts/password/change    controllers.Account.doChangePassword

GET     /accounts/verify            controllers.Account.verifyEmail

GET     /accounts/add               controllers.Account.link

GET     /accounts/link              controllers.Account.askLink
POST    /accounts/link              controllers.Account.doLink

GET     /accounts/merge             controllers.Account.askMerge
POST    /accounts/merge             controllers.Account.doMerge

GET     /login/password/forgot     controllers.Signup.forgotPassword(email: String ?= "")
POST    /login/password/forgot     controllers.Signup.doForgotPassword

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file          controllers.Assets.at(path="/public", file)
